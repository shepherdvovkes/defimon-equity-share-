import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { ethers } from 'ethers';
import { FaRocket, FaClipboardList, FaUserFriends } from 'react-icons/fa';

const FormContainer = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 30px;
  
  @media (max-width: 768px) {
    grid-template-columns: 1fr;
  }
`;

const FormSection = styled.div`
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 10px;
  padding: 25px;
`;

const SectionTitle = styled.h4`
  margin: 0 0 20px 0;
  color: #333;
  font-size: 18px;
  display: flex;
  align-items: center;
  gap: 10px;
`;

const FormGroup = styled.div`
  margin-bottom: 20px;
`;

const Label = styled.label`
  display: block;
  margin-bottom: 8px;
  color: #555;
  font-weight: 500;
  font-size: 14px;
`;

const Input = styled.input`
  width: 100%;
  padding: 12px 15px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 16px;
  transition: border-color 0.3s ease;
  box-sizing: border-box;

  &:focus {
    outline: none;
    border-color: #667eea;
  }

  &.error {
    border-color: #e74c3c;
  }
`;

const Button = styled.button`
  background: linear-gradient(45deg, #667eea, #764ba2);
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  width: 100%;
  margin-top: 10px;

  &:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }
`;

const ParticipantsList = styled.div`
  margin-top: 20px;
`;

const ParticipantCard = styled.div`
  background: white;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 15px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
`;

const ParticipantHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
`;

const ParticipantName = styled.h5`
  margin: 0;
  color: #333;
  font-size: 16px;
`;

const ParticipantStatus = styled.span`
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: 500;
  
  &.active {
    background: #d4edda;
    color: #155724;
  }
  
  &.inactive {
    background: #f8d7da;
    color: #721c24;
  }
  
  &.leaver {
    background: #fff3cd;
    color: #856404;
  }
`;

const ParticipantDetails = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 15px;
  font-size: 14px;
`;

const DetailItem = styled.div`
  .label {
    color: #666;
    font-weight: 500;
    margin-bottom: 5px;
  }
  
  .value {
    color: #333;
    font-weight: 600;
  }
`;

const ActionButtons = styled.div`
  display: flex;
  gap: 10px;
  margin-top: 15px;
`;

const ActionButton = styled.button`
  padding: 8px 16px;
  border: none;
  border-radius: 6px;
  font-size: 12px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  
  &.activate {
    background: #28a745;
    color: white;
    
    &:hover {
      background: #218838;
    }
  }
  
  &.deactivate {
    background: #dc3545;
    color: white;
    
    &:hover {
      background: #c82333;
    }
  }
  
  &.leaver {
    background: #ffc107;
    color: #212529;
    
    &:hover {
      background: #e0a800;
    }
  }
`;



const ProgressBar = styled.div`
  background: #e9ecef;
  border-radius: 10px;
  height: 20px;
  margin: 15px 0;
  overflow: hidden;
`;

const ProgressFill = styled.div`
  background: linear-gradient(45deg, #667eea, #764ba2);
  height: 100%;
  width: ${props => props.percentage}%;
  transition: width 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 12px;
  font-weight: 600;
`;

function ParticipantForm({ contract, participants, onParticipantAdded, onStatusUpdate, isVestingStarted }) {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    wallet: '',
    allocation: ''
  });
  const [totalAllocation, setTotalAllocation] = useState(0);
  const [isAdding, setIsAdding] = useState(false);
  const [isManaging, setIsManaging] = useState(false);

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–æ–ª—é
  useEffect(() => {
    const total = participants.reduce((sum, p) => sum + parseFloat(p.totalAllocation), 0);
    setTotalAllocation(total);
  }, [participants]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  const addParticipant = async (e) => {
    e.preventDefault();
    
    if (!formData.firstName.trim() || !formData.lastName.trim() || !formData.wallet.trim() || !formData.allocation.trim()) {
      onStatusUpdate('error', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    const allocation = parseFloat(formData.allocation);
    if (isNaN(allocation) || allocation <= 0 || allocation > 100) {
      onStatusUpdate('error', '–î–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 100');
      return;
    }

    if (totalAllocation + allocation > 100) {
      onStatusUpdate('error', `–û–±—â–∞—è –¥–æ–ª—è –ø—Ä–µ–≤—ã—Å–∏—Ç 100%. –î–æ—Å—Ç—É–ø–Ω–æ: ${(100 - totalAllocation).toFixed(2)}%`);
      return;
    }

    if (!ethers.isAddress(formData.wallet.trim())) {
      onStatusUpdate('error', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ Ethereum');
      return;
    }

    try {
      setIsAdding(true);
      onStatusUpdate('info', '–î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞...');

      const tx = await contract.addParticipant(
        formData.firstName.trim(),
        formData.lastName.trim(),
        formData.wallet.trim(),
        allocation
      );

      onStatusUpdate('info', '–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
      await tx.wait();

      onStatusUpdate('success', '–£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
      setFormData({ firstName: '', lastName: '', wallet: '', allocation: '' });
      onParticipantAdded();

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
      onStatusUpdate('error', `–û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsAdding(false);
    }
  };

  // –ó–∞–ø—É—Å–∫ –≤–µ—Å—Ç–∏–Ω–≥–∞
  const startVesting = async () => {
    try {
      setIsManaging(true);
      onStatusUpdate('info', '–ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Å—Ç–∏–Ω–≥...');

      const tx = await contract.startVesting();
      onStatusUpdate('info', '–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
      await tx.wait();

      onStatusUpdate('success', '–í–µ—Å—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
      onParticipantAdded();

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ—Å—Ç–∏–Ω–≥–∞:', error);
      onStatusUpdate('error', `–û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsManaging(false);
    }
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  const changeParticipantStatus = async (address, isActive, isLeaver) => {
    try {
      setIsManaging(true);
      onStatusUpdate('info', '–ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞...');

      const tx = await contract.setParticipantStatus(address, isActive, isLeaver);
      onStatusUpdate('info', '–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
      await tx.wait();

      onStatusUpdate('success', '–°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω!');
      onParticipantAdded();

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      onStatusUpdate('error', `–û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsManaging(false);
    }
  };

  const getStatusText = (isActive, isLeaver) => {
    if (isLeaver) return '–ü–æ–∫–∏–Ω—É–ª –ø—Ä–æ–µ–∫—Ç';
    if (isActive) return '–ê–∫—Ç–∏–≤–µ–Ω';
    return '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
  };

  const getStatusClass = (isActive, isLeaver) => {
    if (isLeaver) return 'leaver';
    if (isActive) return 'active';
    return 'inactive';
  };

  return (
    <FormContainer>
      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ */}
      <FormSection>
        <SectionTitle>üë§ –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞</SectionTitle>
        
        <form onSubmit={addParticipant}>
          <FormGroup>
            <Label>–ò–º—è:</Label>
            <Input
              type="text"
              name="firstName"
              value={formData.firstName}
              onChange={handleInputChange}
              placeholder="–ò–≤–∞–Ω"
              disabled={isAdding}
            />
          </FormGroup>

          <FormGroup>
            <Label>–§–∞–º–∏–ª–∏—è:</Label>
            <Input
              type="text"
              name="lastName"
              value={formData.lastName}
              onChange={handleInputChange}
              placeholder="–ò–≤–∞–Ω–æ–≤"
              disabled={isAdding}
            />
          </FormGroup>

          <FormGroup>
            <Label>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:</Label>
            <Input
              type="text"
              name="wallet"
              value={formData.wallet}
              onChange={handleInputChange}
              placeholder="0x..."
              disabled={isAdding}
            />
          </FormGroup>

          <FormGroup>
            <Label>–î–æ–ª—è (%):</Label>
            <Input
              type="number"
              name="allocation"
              value={formData.allocation}
              onChange={handleInputChange}
              placeholder="40"
              min="0.01"
              max="100"
              step="0.01"
              disabled={isAdding}
            />
          </FormGroup>

          <Button type="submit" disabled={isAdding}>
            {isAdding ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞'}
          </Button>
        </form>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è */}
        <div style={{ marginTop: '20px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '10px' }}>
            <span style={{ fontSize: '14px', color: '#666' }}>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {totalAllocation.toFixed(2)}%</span>
            <span style={{ fontSize: '14px', color: '#666' }}>–û—Å—Ç–∞–ª–æ—Å—å: {(100 - totalAllocation).toFixed(2)}%</span>
          </div>
          <ProgressBar>
            <ProgressFill percentage={totalAllocation} />
          </ProgressBar>
        </div>

        {/* –ó–∞–ø—É—Å–∫ –≤–µ—Å—Ç–∏–Ω–≥–∞ */}
        {participants.length > 0 && !isVestingStarted && (
          <div style={{ marginTop: '20px' }}>
            <Button 
              onClick={startVesting} 
              disabled={isManaging || totalAllocation < 100}
              style={{ 
                background: totalAllocation < 100 ? '#6c757d' : 'linear-gradient(45deg, #28a745, #20c997)',
                marginTop: '10px'
              }}
            >
              {isManaging ? '–ó–∞–ø—É—Å–∫...' : (
                <>
                  <FaRocket style={{ marginRight: '8px' }} />
                  –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ—Å—Ç–∏–Ω–≥
                </>
              )}
            </Button>
            {totalAllocation < 100 && (
              <p style={{ fontSize: '12px', color: '#666', marginTop: '5px', textAlign: 'center' }}>
                –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ—Å—Ç–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å 100% –¥–æ–ª–µ–π
              </p>
            )}
          </div>
        )}
      </FormSection>

      {/* –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
      <FormSection>
        <SectionTitle>
          <FaClipboardList style={{ marginRight: '8px' }} />
          –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({participants.length})
        </SectionTitle>
        
        {participants.length === 0 ? (
          <p style={{ color: '#666', textAlign: 'center', marginTop: '20px' }}>
            –£—á–∞—Å—Ç–Ω–∏–∫–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
          </p>
        ) : (
          <ParticipantsList>
            {participants.map((participant, index) => (
              <ParticipantCard key={index}>
                <ParticipantHeader>
                  <ParticipantName>
                    {participant.firstName} {participant.lastName}
                  </ParticipantName>
                  <ParticipantStatus className={getStatusClass(participant.isActive, participant.isLeaver)}>
                    {getStatusText(participant.isActive, participant.isLeaver)}
                  </ParticipantStatus>
                </ParticipantHeader>

                <ParticipantDetails>
                  <DetailItem>
                    <div className="label">–ö–æ—à–µ–ª–µ–∫:</div>
                    <div className="value">{participant.address.slice(0, 6)}...{participant.address.slice(-4)}</div>
                  </DetailItem>
                  <DetailItem>
                    <div className="label">–î–æ–ª—è:</div>
                    <div className="value">{participant.totalAllocation} DFX</div>
                  </DetailItem>
                  <DetailItem>
                    <div className="label">–ü–æ–ª—É—á–µ–Ω–æ:</div>
                    <div className="value">{participant.claimedAmount} DFX</div>
                  </DetailItem>
                  <DetailItem>
                    <div className="label">–î–æ—Å—Ç—É–ø–Ω–æ:</div>
                    <div className="value">{participant.vestedBalance} DFX</div>
                  </DetailItem>
                </ParticipantDetails>

                {!isVestingStarted && (
                  <ActionButtons>
                    {participant.isActive && !participant.isLeaver ? (
                      <>
                        <ActionButton 
                          className="deactivate"
                          onClick={() => changeParticipantStatus(participant.address, false, false)}
                          disabled={isManaging}
                        >
                          –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                        </ActionButton>
                        <ActionButton 
                          className="leaver"
                          onClick={() => changeParticipantStatus(participant.address, false, true)}
                          disabled={isManaging}
                        >
                          –ü–æ–∫–∏–Ω—É–ª –ø—Ä–æ–µ–∫—Ç
                        </ActionButton>
                      </>
                    ) : (
                      <ActionButton 
                        className="activate"
                        onClick={() => changeParticipantStatus(participant.address, true, false)}
                        disabled={isManaging}
                      >
                        –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                      </ActionButton>
                    )}
                  </ActionButtons>
                )}
              </ParticipantCard>
            ))}
          </ParticipantsList>
        )}
      </FormSection>
    </FormContainer>
  );
}

export default ParticipantForm;
